// GLSL Compute Shader
#version 450

#extension GL_GOOGLE_include_directive : enable

#include "uniform.h"

layout(local_size_x = 4, local_size_y = 4) in;

// Equivalent of TextData struct
struct TextData {
    uint character;
    uint xormode;
    uint fontNum;
};

// Equivalent of LineData struct
struct LineData {
    uint x0;
    uint y0;
    uint x1;
    uint y1;
    uint n;
    uint total;
};

struct RunBitData {
    uint tag;
};

// Equivalent of Rotoscope struct
struct Rotoscope {
    uint content;
    uint EGAcolor;
    uint argb;
    int blt_x;
    int blt_y;
    int blt_w;
    int blt_h;
    uint bgColor;
    uint fgColor;
    TextData textData;
    LineData lineData;
    RunBitData runBitData;
    uint navMask;
    uint chromaKey;
};

layout(rgba8, binding = 0) writeonly uniform image2D imgOutput;

layout(std430, binding = 1) buffer RotoBuffer {
    Rotoscope rotoPixels[];
};

layout(binding = 2) uniform sampler2DArray ShipTexture;
layout(binding = 3) uniform sampler2DArray PlanetTextures;

layout(binding = 4) uniform UB {
    UniformBlock uniforms;
} ub;

layout(binding = 5) uniform IconBlock {
    Icon icons[32];
};

#include "tables.h"
#include "noise.h"
#include "distance.h"
#include "hyperspace_stars.h"
#include "starburst.h"
#include "nebula.h"
#include "sun.h"
#include "planet.h"
#include "engines.h"

float LineSegmentDistance(vec2 p, vec2 a, vec2 b) {
    vec2 pa = p - a, ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h);
}

vec4 DrawNavigationPixel(const Rotoscope roto, vec2 uv, vec2 subUv) {
    vec4 pixel = vec4(0.);

    vec4 fragColor;
    vec2 sub;

    float iTime = ub.uniforms.iTime;

    float scrOffX = float(roto.blt_x) + subUv.x;
    float scrOffY = float(roto.blt_y) + subUv.y;

    vec2 pixelPos = vec2(scrOffX, scrOffY);

    pixelPos -= vec2(80.0, 100.0);

    float subX = scrOffX / float(roto.blt_w);
    float subY = scrOffY / float(roto.blt_h);

    // Split view -- helpful to debug
    #if 0
    if(subY > 0.5)
    {
        return vec4(unpackUnorm4x8(roto.argb)).bgra;
    }
    #endif

    vec2 iResolution = vec2(float(roto.blt_w), float(roto.blt_h));
    vec2 fragCoord = pixelPos + vec2(80.0, 100.0);

    vec2 worldCoords = vec2((ub.uniforms.worldX) / 1000.0, (ub.uniforms.worldY) / 1000.0);
    pixelPos += vec2(ub.uniforms.worldX, ub.uniforms.worldY);

    vec4 starPixel = vec4(0.);
    vec4 sunPixel = vec4(0.);
    vec4 iconPixel = vec4(0.);
    vec4 shipPixel = vec4(0.);
    vec4 planetPixel = vec4(0.);
    float nebulaPixel = ub.uniforms.nebulaBase;

    for(int i = 0; i < 64; i++) {
        Icon icon = icons[i];

        if(icon.isActive == 0)
            continue;

        vec2 iconPos = vec2(float(icon.screenX), float(icon.screenY));

        iconPos *= ub.uniforms.zoomLevel;

        // 27 is RIGHT
        // 28 is UP to the RIGHT
        // 29 is UP
        // 30 is UP to the LEFT
        // 31 is LEFT
        // 32 is DOWN to the LEFT
        // 33 is DOWN
        // 34 is DOWN to the RIGHT
        if(icon.id >= 27 && icon.id <= 34) {
            float distance = ub.uniforms.zoomLevel;
            if(calculateBoundingBoxDistanceIcon(iconPos, pixelPos) < distance) {
                vec2 normUV = calculateNormalizedUVIcon(iconPos, pixelPos, distance * 2.0);

                normUV -= 0.5;
                // Rotate the normUVs to match the icon.id orientation
                float angle = ub.uniforms.heading; // (icon.id - 27) * 45.0;
                float rad = radians(angle);
                float s = sin(rad);
                float c = cos(rad);
                normUV = vec2(normUV.x * c - normUV.y * s, normUV.x * s + normUV.y * c);
                normUV *= 2.0;

                normUV += 0.5;

                vec4 texColor = texture(ShipTexture, vec3(normUV, 0));
                vec4 ourShipPixel = vec4(texColor.rgb * texColor.a, texColor.a);

                if(normUV.x < 0.02 && normUV.y >= 0.30 && normUV.y <= 0.70 && ub.uniforms.thrust > 0.0)
                {
                    vec2 subUv = vec2((normUV.x + 1.0), ((normUV.y - 0.3) * 2.0) + 0.1);
                    vec4 engines;

                    float thrustRadius = 0.15 + (ub.uniforms.thrust * 0.18);

                    main_engines(engines, subUv, iTime, thrustRadius);
                    ourShipPixel += engines;
                }

                 shipPixel = ourShipPixel  + (shipPixel * (1 - ourShipPixel.a));
            }
        } else if(icon.id >= 51 && icon.id <= 91) {
            float basesize = 29.0f * float(icon.id - 50);

            if(calculateDistance(iconPos, pixelPos) < basesize) {
                iconPixel += colortable[icon.clr & 0xf];
            }
        } else if(icon.id >= 35 && icon.id <= 42) {
            float distance = 0.5 * ub.uniforms.zoomLevel;
            if(calculateBoundingBoxDistanceIcon(iconPos, pixelPos) < distance) {
                vec2 normUV = calculateNormalizedUVIcon(iconPos, pixelPos, distance * 2.0);

                normUV -= 0.5;
                // Rotate the normUVs to match the icon.id orientation
                //float angle = (icon.id - 35) * 45.0;
                float rad = icon.objectHeading; //radians(angle);
                float s = sin(rad);
                float c = cos(rad);
                normUV = vec2(normUV.x * c - normUV.y * s, normUV.x * s + normUV.y * c);

                normUV += 0.5;

                vec4 texColor = texture(ShipTexture, vec3(normUV, 1));
                vec4 vessel = vec4(texColor.rgb * texColor.a, texColor.a);

                shipPixel = vessel  + (shipPixel * (1 - vessel.a));
            }
        } else if(icon.id < 50) {
            float distance = 0.5 * ub.uniforms.zoomLevel;
            if(calculateBoundingBoxDistanceIcon(iconPos, pixelPos) < distance) {
                iconPixel += colortable[icon.clr & 0xf];
            }
        } else {
            float distanceI = 2.0;

            switch(icon.id) {
                case 251:
                    {
                        vec2 start = iconPos.xy;
                        vec2 end = vec2(icon.x1, icon.y1);
                        end *= ub.uniforms.zoomLevel;

                        vec4 baseColor = colortable[icon.clr & 0xf];

                        // Calculate the distance from the pixel to the line segment
                        float lineDist = LineSegmentDistance(pixelPos.xy, start.xy, end.xy);

                        // Use a thickness value for the core of the laser
                        float coreThickness = 0.5 * ub.uniforms.zoomLevel; // Core thickness of the laser

                        // Calculate glow effect based on distance from the line
                        float glowDist = 0.25 * ub.uniforms.zoomLevel; // Glow distance
                        float glowIntensity = smoothstep(glowDist, coreThickness, lineDist);

                        // Adjust the base color's alpha based on the glow intensity to create a fading effect
                        vec4 color = vec4(baseColor.rgb, baseColor.a * glowIntensity);

                        // If the distance is within the glow effect range, blend the pixel color
                        if(lineDist <= glowDist) {
                            float coreIntensity = smoothstep(coreThickness, 0.0, lineDist);
                            // Enhance the core's brightness
                            vec4 coreColor = vec4(baseColor.rgb * (1.0 + coreIntensity), 1.0);
                            // Blend the glow and core colors
                            iconPixel += mix(color, coreColor, coreIntensity);
                        }
                    }
                    break;
                case 252:
                    {
                        distanceI = 0.25 * ub.uniforms.zoomLevel;
                        if(calculateBoundingBoxDistanceIcon(iconPos, pixelPos) < distanceI) {
                            iconPixel += colortable[icon.clr & 0xf];
                        }
                    }
                    break;
                case 254: // Invisible icon (Encounter hit testing?)
                    if(roto.blt_x == icon.screenX && roto.blt_y == icon.screenY) {
                        iconPixel += colortable[icon.clr & 0xf];
                    }
                    break;
                default:
                    break;
            }
        }
    }

    hyperspaceRender(pixel, fragCoord, iTime, iResolution, worldCoords + vec2(1000.0, 1000.0));

    //pixel = vec4(subUv.xy, 0.0, 1.0);

    if(nebulaPixel > 0.0)
    {
        vec4 p;

        nebulaPixel = min(nebulaPixel / 8.0, 1.0);

        vec2 uv=fragCoord.xy/iResolution.xy-.5;
        nebula(p, uv + (worldCoords * ub.uniforms.nebulaMultiplier), iTime);
        pixel += p * nebulaPixel;
    }

    pixel += starPixel;
    pixel = sunPixel  + (pixel * (1 - sunPixel.a));
    pixel = planetPixel + (pixel * (1 - planetPixel.a));
    pixel = iconPixel + (pixel * (1 - iconPixel.a));
    pixel = shipPixel + (pixel * (1 - shipPixel.a));

#if 0
    // Draw grid at whole integer values of pixelPos
    float gridLineWidth = 0.02; // Width of the grid lines
    vec2 gridPos = mod(pixelPos + vec2(0.5, 0.5), ub.uniforms.zoomLevel);
    if(gridPos.x < gridLineWidth || gridPos.y < gridLineWidth) {
        // Adjust pixel color to draw the grid
        pixel.rgb = vec3(0.0, 1.0, 0.0); // Change pixel color to green for grid lines
    }
#endif
    return pixel;
}

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

    vec2 windowSize = vec2(float(ub.uniforms.WINDOW_WIDTH), float(ub.uniforms.WINDOW_HEIGHT));
    vec2 graphicSize = vec2(float(ub.uniforms.GRAPHICS_MODE_WIDTH), float(ub.uniforms.GRAPHICS_MODE_HEIGHT));
  
    vec2 uv = vec2(pixelPos) / windowSize;

    const float polygonWidth = ub.uniforms.WINDOW_WIDTH / ub.uniforms.GRAPHICS_MODE_WIDTH;

    // Calculate the corresponding position in the smaller texture
    uvec2 src = uvec2(floor(uv * graphicSize));

    // Calculate the index in the smaller texture

    uvec2 srcLookup = src + uvec2(4, 8);

    uint srcIndex = srcLookup.y * uint(ub.uniforms.GRAPHICS_MODE_WIDTH) + srcLookup.x;

    Rotoscope roto = rotoPixels[srcIndex];

    roto.blt_x = int(src.x) - 4;
    roto.blt_y = int(src.y) - 8;
    roto.blt_w = 72;
    roto.blt_h = 120;

    vec2 subUv = (uv * graphicSize) - vec2(src);

    // Pull the pixel from the smaller texture
    vec4 pixel = vec4(1.0, 0.0, 0.0, 1.0);

    // System and hyperspace
    pixel = DrawNavigationPixel(roto, uv, subUv);

    // Place the pixel in the larger surface
    imageStore(imgOutput, pixelPos, pixel);
}
