// GLSL Compute Shader
#version 450

#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 32, local_size_y = 32) in;

// Equivalent of PixelContents enum
#define ClearPixel 0
#define NavigationalPixel 1
#define TextPixel 2
#define LinePixel 3
#define EllipsePixel 4
#define BoxFillPixel 5
#define PolyFillPixel 6
#define PicPixel 7
#define PlotPixel 8
#define TilePixel 9
#define RunBitPixel 10

#define Icon_Other  0
#define Icon_Sun    1
#define Icon_Planet 2
#define Icon_Nebula 3

struct Icon {
    uint isActive;
    int x;
    int y;
    int screenX;
    int screenY;
    int bltX;
    int bltY;
    uint id;
    uint clr;
    uint icon_type;
    int planet_to_sunX;
    int planet_to_sunY;
};

// Equivalent of TextData struct
struct TextData {
    uint character;
    uint xormode;
    uint fontNum;
};

// Equivalent of LineData struct
struct LineData {
    uint x0;
    uint y0;
    uint x1;
    uint y1;
    uint n;
    uint total;
};

struct RunBitData {
    uint tag;
};

// Equivalent of Rotoscope struct
struct Rotoscope {
    uint content;
    uint EGAcolor;
    uint argb;
    int blt_x;
    int blt_y;
    int blt_w;
    int blt_h;
    uint bgColor;
    uint fgColor;
    TextData textData;
    LineData lineData;
    RunBitData runBitData;
};

layout(rgba8, binding = 0) writeonly uniform image2D imgOutput;

layout(std430, binding = 1) buffer RotoBuffer {
    Rotoscope rotoPixels[];
};

layout(binding = 2) uniform sampler2D FONT1Texture;
layout(binding = 3) uniform sampler2D FONT2Texture;
layout(binding = 4) uniform sampler2D FONT3Texture;
layout(binding = 5) uniform sampler2D LOGO1Texture;
layout(binding = 6) uniform sampler2D LOGO2Texture;
layout(binding = 7) uniform sampler2D PORTPICTexture;
layout(binding = 8) uniform sampler2D RACEDOSATLASTexture;
layout(binding = 9) uniform sampler2D ShipTexture;
layout(binding = 10) uniform sampler2DArray PlanetTextures;

layout(binding = 11) uniform UniformBlock {
    int GRAPHICS_MODE_WIDTH;
    int GRAPHICS_MODE_HEIGHT;
    int WINDOW_WIDTH;
    int WINDOW_HEIGHT;
    uint useRotoscope;
    uint useEGA;
    float iTime;
    float worldX;
    float worldY;
    float heading;
    float deadX;
    float deadY;
} uniforms;

layout(binding = 12) uniform IconBlock {
    Icon icons[32];
};

const vec4 colortable[16] = 
{
    vec4(0.0, 0.0, 0.0, 1.0), // black
    vec4(0.0, 0.0, 0.67, 1.0), // blue
    vec4(0.0, 0.67, 0.0, 1.0), // green
    vec4(0.0, 0.67, 0.67, 1.0), // cyan
    vec4(0.67, 0.0, 0.0, 1.0), // red
    vec4(0.67, 0.0, 0.67, 1.0), // magenta
    vec4(0.67, 0.33, 0.0, 1.0), // brown
    vec4(0.67, 0.67, 0.67, 1.0), // light gray
    vec4(0.33, 0.33, 0.33, 1.0), // dark gray
    vec4(0.33, 0.33, 1.0, 1.0),
    vec4(0.33, 1.0, 0.33, 1.0),
    vec4(0.33, 1.0, 1.0, 1.0),
    vec4(1.0, 0.33, 0.33, 1.0),
    vec4(1.0, 0.33, 1.0, 1.0),
    vec4(1.0, 1.0, 0.33, 1.0),
    vec4(1.0, 1.0, 1.0, 1.0),
};

#include "galaxy.h"
#include "station_stars.h"
#include "hyperspace_stars.h"
#include "starburst.h"
#include "nebula.h"
#include "sun.h"
#include "planet.h"

const vec4 CGAPalette[4] = 
{
    vec4(0.0, 0.0, 0.0, 1.0), // black
    vec4(0.0, 0.67, 0.67, 1.0), // cyan
    vec4(0.67, 0.0, 0.67, 1.0), // magenta
    vec4(0.67, 0.67, 0.67, 1.0), // light gray
};

const uint EGAToCGA[16] = {0, 2, 1, 11, 4, 6, 8, 10, 5, 3, 9, 7, 14, 0, 13, 15};

vec4 DrawLinePixel(const Rotoscope roto, vec2 uv, float polygonWidth) {
    vec4 pixel;

    float lineX1 = (roto.lineData.x0 + 0.10f) / uniforms.GRAPHICS_MODE_WIDTH;
    float lineY1 = (roto.lineData.y0 + 0.10f) / uniforms.GRAPHICS_MODE_HEIGHT;
    float lineX2 = (roto.lineData.x1 + 0.90f) / uniforms.GRAPHICS_MODE_WIDTH;
    float lineY2 = (roto.lineData.y1 + 0.90f) / uniforms.GRAPHICS_MODE_HEIGHT;

    float a = polygonWidth;
    float one_px = 1.0f / uniforms.WINDOW_WIDTH;
    vec2 p1 = vec2(lineX1, lineY1);
    vec2 p2 = vec2(lineX2, lineY2);

    float d = distance(p1, p2);
    float duv = distance(p1, uv);

    float r = 1.0f - floor(1.0f - (a * one_px) + distance(mix(p1, p2, clamp(duv / d, 0.0f, 1.0f)), uv));

    if (r > 0.0f) {
        pixel = colortable[roto.fgColor & 0xf];
    } else {
        pixel = colortable[roto.bgColor & 0xf];
    }

    return pixel;
}

vec4 DrawFontPixel(const Rotoscope roto, vec2 uv, vec2 subUv) {
    vec4 pixel;

    float fontX = (float(roto.blt_x) + subUv.x) / float(roto.blt_w);
    float fontY = (float(roto.blt_y) + subUv.y) / float(roto.blt_h);

    if(roto.textData.fontNum == 1) {
        // Find the character in our atlas.
        const float fontSpaceWidth = 8.0f * 4.0f;
        const float fontSpaceHeight = 8.0f * 4.0f;

        const float atlasWidth = 448.0f;
        const float atlasHeight = 160.0f;

        uint c = roto.textData.character - 32;
        uint fontsPerRow = 448 / uint(fontSpaceWidth);
        uint fontRow = c / fontsPerRow;
        uint fontCol = c % fontsPerRow;

        float u = fontCol * fontSpaceWidth / atlasWidth;
        float v = fontRow * fontSpaceHeight / atlasHeight;

        u += fontX * (fontSpaceWidth / atlasWidth);
        v += fontY * (fontSpaceHeight / atlasHeight);

        vec4 glyph = texture(FONT1Texture, vec2(u, v));
        pixel = colortable[roto.bgColor & 0xf];
        if(glyph.r > 0.80f) {
            pixel = colortable[roto.fgColor & 0xf];
        }
    } else if (roto.textData.fontNum == 2) {
        // Find the character in our atlas.
        const float fontSpaceWidth = 15.0f * 4.0f;
        const float fontSpaceHeight = 11.0f * 4.0f;

        const float atlasWidth = 840.0f;
        const float atlasHeight = 220.0f;

        uint c = roto.textData.character - 32;
        uint fontsPerRow = 840 / uint(fontSpaceWidth);
        uint fontRow = c / fontsPerRow;
        uint fontCol = c % fontsPerRow;

        float u = fontCol * fontSpaceWidth / atlasWidth;
        float v = fontRow * fontSpaceHeight / atlasHeight;

        u += fontX * (fontSpaceWidth / atlasWidth);
        v += fontY * (fontSpaceHeight / atlasHeight);

        vec4 glyph = texture(FONT2Texture, vec2(u, v));
        pixel = colortable[roto.bgColor & 0xf];
        if(glyph.r > 0.9f) {
            pixel = colortable[roto.fgColor & 0xf];
        }
    } else if (roto.textData.fontNum == 3) {
        // Find the character in our atlas.
        const float fontSpaceWidth = 15.0f * 4.0f;
        const float fontSpaceHeight = 11.0f * 4.0f;

        const float atlasWidth = 840.0f;
        const float atlasHeight = 220.0f;

        uint c = roto.textData.character - 32;
        uint fontsPerRow = 840 / uint(fontSpaceWidth);
        uint fontRow = c / fontsPerRow;
        uint fontCol = c % fontsPerRow;

        float u = fontCol * fontSpaceWidth / atlasWidth;
        float v = fontRow * fontSpaceHeight / atlasHeight;

        u += fontX * (fontSpaceWidth / atlasWidth);
        v += fontY * (fontSpaceHeight / atlasHeight);

        vec4 glyph = texture(FONT3Texture, vec2(u, v));
        pixel = colortable[roto.bgColor & 0xf];
        if(glyph.r > 0.9f) {
            pixel = colortable[roto.fgColor & 0xf];
        }
    }

    return pixel;
}

float rgb2hue(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return abs(q.z + (q.w - q.y) / (6.0 * d + e));
}

bool isGreen(vec3 rgb) {
    float hue = rgb2hue(rgb);
    return hue > 0.32 && hue < 0.34;
}

vec4 DrawSDFSilhouette(const Rotoscope roto, vec2 subUv) {
    vec4 sdf = texture(RACEDOSATLASTexture, subUv);

    if(sdf.r < 0.5)
    {
        return colortable[roto.bgColor & 0xf];
    }
    else
    {
        return colortable[roto.fgColor & 0xf];
    }
}

float calculateDistance(vec2 point1, vec2 point2) {
    float xDist = point2.x - point1.x;
    float yDist = 0.60f * (point2.y - point1.y);
    return sqrt((xDist * xDist) + (yDist * yDist));
}

float calculateBoundingBoxDistance(vec2 point1, vec2 point2) {
    float xDist = abs(point2.x - point1.x);
    float yDist = abs(point2.y - point1.y);
    return max(xDist, yDist);
}

vec2 calculateNormalizedUV(vec2 point1, vec2 point2, float width) {
    vec2 uv = vec2((point2.x - point1.x) / width, (point2.y - point1.y) / width) + vec2(0.5, 0.5);
    return uv;
}

float calculateBoundingBoxDistanceIcon(vec2 point1, vec2 point2) {
    float xDist = abs(point2.x - point1.x);
    float yDist = 0.60f * abs(point2.y - point1.y);
    return max(xDist, yDist);
}

vec2 calculateNormalizedUVIcon(vec2 point1, vec2 point2, float width) {
    vec2 uv = vec2((point2.x - point1.x) / width, 0.60f * (point2.y - point1.y) / width) + vec2(0.5, 0.5);
    return uv;
}

vec4 DrawNavigationPixel(const Rotoscope roto, vec2 uv, vec2 subUv) {
    vec4 pixel;

    vec4 fragColor;
    vec2 sub;

    float iTime = uniforms.iTime;

    float scrOffX = float(roto.blt_x) + subUv.x;
    float scrOffY = float(roto.blt_y) + subUv.y;

    scrOffX += uniforms.deadX;
    scrOffY += uniforms.deadY;

    float subX = scrOffX / float(roto.blt_w);
    float subY = scrOffY / float(roto.blt_h);

    // Split view -- helpful to debug
    #if 0
    if(subY > 0.5)
    {
        return vec4(unpackUnorm4x8(roto.argb)).bgra;
    }
    #endif

    vec2 pixelPos = vec2(scrOffX, scrOffY);

    vec2 iResolution = vec2(float(roto.blt_w), float(roto.blt_h));
    vec2 fragCoord = vec2(subX * iResolution.x, subY * iResolution.y);

    vec2 worldCoords = vec2(uniforms.worldX, uniforms.worldY);

    vec4 starPixel = vec4(0.);
    vec4 sunPixel = vec4(0.);
    vec4 iconPixel = vec4(0.);
    vec4 shipPixel = vec4(0.);
    vec4 planetPixel = vec4(0.);
    float nebulaPixel = 0.0;

    for(int i = 0; i < 32; i++) {
        Icon icon = icons[i];

        if(icon.isActive == 0)
            continue;

        vec2 iconPos = vec2(float(icon.screenX), float(icon.screenY));
        vec2 bltPos = vec2(float(icon.bltX) + 3.0, float(icon.bltY) + 3.0);

        // 27 is RIGHT
        // 28 is UP to the RIGHT
        // 29 is UP
        // 30 is UP to the LEFT
        // 31 is LEFT
        // 32 is DOWN to the LEFT
        // 33 is DOWN
        // 34 is DOWN to the RIGHT
        if(icon.id >= 27 && icon.id <= 34) {
            float distance = 4.0;
            if(calculateBoundingBoxDistanceIcon(bltPos, pixelPos) < distance) {
                vec2 normUV = calculateNormalizedUVIcon(bltPos, pixelPos, distance * 2.0);

                normUV -= 0.5;
                // Rotate the normUVs to match the icon.id orientation
                float angle = (icon.id - 27) * 45.0;
                float rad = radians(angle);
                float s = sin(rad);
                float c = cos(rad);
                normUV = vec2(normUV.x * c - normUV.y * s, normUV.x * s + normUV.y * c);

                normUV += 0.5;

                vec4 texColor = texture(ShipTexture, normUV);
                shipPixel = vec4(texColor.rgb * texColor.a, texColor.a);
            }
        } else if(icon.id >= 51 && icon.id <= 91) {
            float basesize = 29.0f * float(icon.id - 50);

            if(icon.icon_type == Icon_Nebula)
            {
                if(calculateDistance(iconPos, pixelPos) < basesize) {
                    nebulaPixel += basesize - calculateDistance(iconPos, pixelPos);
                }
            }
            else if(icon.icon_type == Icon_Sun)
            {
                float dist = calculateDistance(iconPos, pixelPos);
                if(dist < basesize * 4.0) {
                    vec2 normUV = calculateNormalizedUVIcon(iconPos, pixelPos, basesize * 4.0);
                    main_star(sunPixel, normUV, iTime, colortable[icon.clr & 0xf].rgb);

                    if(dist < basesize * 0.96)
                    {
                        sunPixel.a = 1.0;
                    }
                    else
                    {
                        float luma = 0.299 * sunPixel.r + 0.587 * sunPixel.g + 0.114 * sunPixel.b;
                        sunPixel.a = luma;
                        sunPixel.rgb *= sunPixel.a;
                    }
                }
            }
            else if(icon.icon_type == Icon_Planet)
            {
                float dist = calculateDistance(iconPos, pixelPos);
                if(dist < basesize * 1.05) {
                    vec2 normUV = calculateNormalizedUVIcon(iconPos, pixelPos, basesize * 1.00);

                    vec2 planet_to_sun = vec2(-icon.planet_to_sunX, icon.planet_to_sunY);
                    vec3 planet_to_sun_norm = normalize(vec3(planet_to_sun, 0.0));

                    draw_planet(planetPixel, (normUV - 0.5) / 2.0, iTime, planet_to_sun_norm);

                    if(dist < basesize * 1.0)
                    {
                        planetPixel.a = 1.0;
                    }
                    else
                    {
                        float luma = 0.299 * planetPixel.r + 0.587 * planetPixel.g + 0.114 * planetPixel.b;
                        planetPixel.a = luma;
                        planetPixel.rgb *= planetPixel.a;
                    }
                }
            }
            else
            {
                if(calculateDistance(iconPos, pixelPos) < basesize) {
                    iconPixel += colortable[icon.clr & 0xf];
                }
            }
        } else if(icon.id < 50) {
            if(calculateBoundingBoxDistance(bltPos, pixelPos) < 4.0f) {
                iconPixel += colortable[icon.clr & 0xf];
            }
        } else {
            float distance = 1.0;

            switch(icon.id) {
                case 253:
                    switch(icon.clr & 0xf) {
                        case 0x4: // RED
                        case 0x6: // ORANGE
                            distance = 7.0f;
                            break;
                        case 0xE: // YELLOW
                        case 0xF: // WHITE
                            distance = 10.0f;
                            break;
                        default: // OTHERS
                            distance = 14.0f;
                            break;
                    }
                    if(calculateBoundingBoxDistanceIcon(iconPos, pixelPos) < distance) {
                        vec2 normUV = calculateNormalizedUVIcon(iconPos, pixelPos, distance * 2.0);
                        starburst(starPixel, normUV, iTime, 1.05);
                    }
                    break;
                case 254: // Invisible icon (Encounter hit testing?)
                    if(roto.blt_x == icon.screenX && roto.blt_y == icon.screenY) {
                        iconPixel += colortable[icon.clr & 0xf];
                    }
                    break;
                case 255: // Flux icon
                    if(calculateBoundingBoxDistanceIcon(iconPos, pixelPos) < 14.0) {
                        vec2 normUV = calculateNormalizedUVIcon(iconPos, pixelPos, 30.0) - 0.5;

                        float radius = length(normUV);
    
                        float warpFactor = 0.33 - radius;
    
                        warpFactor = max(0.0, warpFactor);

                        warpFactor *= warpFactor;
    
                        vec2 warp = warpFactor * vec2(starburst_noise(normUV + vec2(iTime)), starburst_noise(normUV + vec2(0.4, iTime)));

                        worldCoords += warp;
                    }
                    break;
                default:
                    break;
            }
        }
    }

    hyperspaceRender(pixel, fragCoord, iTime, iResolution, worldCoords + vec2(1000.0, 1000.0));

    if(nebulaPixel > 0.0)
    {
        vec4 p;

        nebulaPixel = min(nebulaPixel / 8.0, 1.0);

        vec2 uv=fragCoord.xy/iResolution.xy-.5;
        nebula(p, uv + (worldCoords * 50.0), iTime);
        pixel += p * nebulaPixel;
    }

    pixel += starPixel;
    pixel = sunPixel  + (pixel * (1 - sunPixel.a));
    pixel = planetPixel + (pixel * (1 - planetPixel.a));
    pixel = iconPixel + (pixel * (1 - iconPixel.a));
    pixel = shipPixel + (pixel * (1 - shipPixel.a));
    
    return pixel;
}

vec4 DrawRunBitPixel(const Rotoscope roto, vec2 uv, vec2 subUv) {
    vec4 pixel;

    vec4 fragColor;
    vec2 sub;

    float iTime = uniforms.iTime;

    float subX = (float(roto.blt_x) + subUv.x) / float(roto.blt_w);
    float subY = (float(roto.blt_y) + subUv.y) / float(roto.blt_h);

    vec2 iResolution = vec2(float(roto.blt_w), float(roto.blt_h));
    vec2 fragCoord = vec2(subX * iResolution.x, subY * iResolution.y);

    switch (roto.runBitData.tag)
    {
        case 44: // Port-Pic Top 100 pixels
            pixel = texture(PORTPICTexture, vec2(subX, subY * 0.5f));
            if(isGreen(pixel.rgb))
            {
                stationStarsRender(pixel, fragCoord, iTime, iResolution);
            }
            break;
        case 49: // Port-Pic Botton 100 pixels
            pixel = texture(PORTPICTexture, vec2(subX, (subY * 0.5f) + 0.5f));
            break;
        case 141: // First splash
            pixel = texture(LOGO1Texture, uv);
            fragCoord.y = 199.0 - fragCoord.y;
            galaxyRender(fragColor, fragCoord, iTime, iResolution);
            pixel.xyz += fragColor.xyz;
            break;
        case 54:  // Second logo screen
            pixel = texture(LOGO2Texture, uv);
            break;
        case 125:
            sub = vec2(subX / 5.0, subY);
            pixel = DrawSDFSilhouette(roto, sub);
            break;
        case 126:
            sub = vec2(subX / 5.0 + (1.0 / 5.0), subY);
            pixel = DrawSDFSilhouette(roto, sub);
            break;
        case 127:
            sub = vec2(subX / 5.0 + (2.0 / 5.0), subY);
            pixel = DrawSDFSilhouette(roto, sub);
            break;
        case 128:
            sub = vec2(subX / 5.0 + (3.0 / 5.0), subY);
            pixel = DrawSDFSilhouette(roto, sub);
            break;
        case 129:
            sub = vec2(subX / 5.0 + (4.0 / 5.0), subY);
            pixel = DrawSDFSilhouette(roto, sub);
            break;
        default:
            pixel = vec4(1.0, 0.0, 0.0, 1.0); // vec4(unpackUnorm4x8(roto.argb)).bgra;
            break;
    }

    return pixel;
}

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 windowSize = vec2(float(uniforms.WINDOW_WIDTH), float(uniforms.WINDOW_HEIGHT));
    vec2 graphicSize = vec2(float(uniforms.GRAPHICS_MODE_WIDTH), float(uniforms.GRAPHICS_MODE_HEIGHT));
    
    vec2 uv = vec2(pixelPos) / windowSize;

    const float polygonWidth = uniforms.WINDOW_WIDTH / uniforms.GRAPHICS_MODE_WIDTH;

    // Calculate the corresponding position in the smaller texture
    uvec2 src = uvec2(floor(uv * graphicSize));

    // Calculate the index in the smaller texture
    uint srcIndex = src.y * uint(uniforms.GRAPHICS_MODE_WIDTH) + src.x;

    Rotoscope roto = rotoPixels[srcIndex];

    vec2 subUv = (uv * graphicSize) - vec2(src);

    // Pull the pixel from the smaller texture
    vec4 pixel = vec4(unpackUnorm4x8(roto.argb)).bgra;

    if(uniforms.useRotoscope != 0)
    {
        switch(roto.content) {
            #if 0 
            case LinePixel:
                pixel = DrawLinePixel(roto, uv, polygonWidth);
                break;
            #endif
            case TextPixel:
                pixel = DrawFontPixel(roto, uv, subUv);    
                break;
            case RunBitPixel:
                pixel = DrawRunBitPixel(roto, uv, subUv);
                break;
            case NavigationalPixel:
                pixel = DrawNavigationPixel(roto, uv, subUv);
                break;
            default:
                break;
        }
    }
    else if(uniforms.useEGA == 0)
    {
        uint c = EGAToCGA[roto.EGAcolor];
        if(subUv.x < 0.5f)
        {
            pixel = CGAPalette[(c >> 2) & 3];
        }
        else
        {
            pixel = CGAPalette[c & 3];
        }
    }

    // Place the pixel in the larger surface
    imageStore(imgOutput, pixelPos, pixel);
}

