// GLSL Compute Shader
#version 450

#extension GL_GOOGLE_include_directive : enable

#include "galaxy.h"
#include "station_stars.h"

layout(local_size_x = 32, local_size_y = 32) in;

// Equivalent of PixelContents enum
#define ClearPixel 0
#define NavigationalPixel 1
#define TextPixel 2
#define LinePixel 3
#define EllipsePixel 4
#define BoxFillPixel 5
#define PolyFillPixel 6
#define PicPixel 7
#define PlotPixel 8
#define TilePixel 9
#define RunBitPixel 10

// Equivalent of TextData struct
struct TextData {
    uint character;
    uint xormode;
    uint fontNum;
};

// Equivalent of LineData struct
struct LineData {
    uint x0;
    uint y0;
    uint x1;
    uint y1;
    uint n;
    uint total;
};

struct RunBitData {
    uint tag;
};

// Equivalent of Rotoscope struct
struct Rotoscope {
    uint content;
    uint EGAcolor;
    uint argb;
    int blt_x;
    int blt_y;
    int blt_w;
    int blt_h;
    uint bgColor;
    uint fgColor;
    TextData textData;
    LineData lineData;
    RunBitData runBitData;
};

layout(rgba8, binding = 0) writeonly uniform image2D imgOutput;

layout(std430, binding = 1) buffer RotoBuffer {
    Rotoscope rotoPixels[];
};

layout(binding = 2) uniform sampler2D FONT1Texture;
layout(binding = 3) uniform sampler2D FONT2Texture;
layout(binding = 4) uniform sampler2D FONT3Texture;
layout(binding = 5) uniform sampler2D LOGO1Texture;
layout(binding = 6) uniform sampler2D LOGO2Texture;
layout(binding = 7) uniform sampler2D PORTPICTexture;

layout(binding = 8) uniform UniformBlock {
    int GRAPHICS_MODE_WIDTH;
    int GRAPHICS_MODE_HEIGHT;
    int WINDOW_WIDTH;
    int WINDOW_HEIGHT;
    uint useRotoscope;
    uint useEGA;
    float iTime;
} uniforms;

const vec4 colortable[16] = 
{
    vec4(0.0, 0.0, 0.0, 1.0), // black
    vec4(0.0, 0.0, 0.67, 1.0), // blue
    vec4(0.0, 0.67, 0.0, 1.0), // green
    vec4(0.0, 0.67, 0.67, 1.0), // cyan
    vec4(0.67, 0.0, 0.0, 1.0), // red
    vec4(0.67, 0.0, 0.67, 1.0), // magenta
    vec4(0.67, 0.33, 0.0, 1.0), // brown
    vec4(0.67, 0.67, 0.67, 1.0), // light gray
    vec4(0.33, 0.33, 0.33, 1.0), // dark gray
    vec4(0.33, 0.33, 1.0, 1.0),
    vec4(0.33, 1.0, 0.33, 1.0),
    vec4(0.33, 1.0, 1.0, 1.0),
    vec4(1.0, 0.33, 0.33, 1.0),
    vec4(1.0, 0.33, 1.0, 1.0),
    vec4(1.0, 1.0, 0.33, 1.0),
    vec4(1.0, 1.0, 1.0, 1.0),
};

const vec4 CGAPalette[4] = 
{
    vec4(0.0, 0.0, 0.0, 1.0), // black
    vec4(0.0, 0.67, 0.67, 1.0), // cyan
    vec4(0.67, 0.0, 0.67, 1.0), // magenta
    vec4(0.67, 0.67, 0.67, 1.0), // light gray
};

const uint EGAToCGA[16] = {0, 2, 1, 11, 4, 6, 8, 10, 5, 3, 9, 7, 14, 0, 13, 15};

vec4 DrawLinePixel(const Rotoscope roto, vec2 uv, float polygonWidth) {
    vec4 pixel;

    float lineX1 = (roto.lineData.x0 + 0.10f) / uniforms.GRAPHICS_MODE_WIDTH;
    float lineY1 = (roto.lineData.y0 + 0.10f) / uniforms.GRAPHICS_MODE_HEIGHT;
    float lineX2 = (roto.lineData.x1 + 0.90f) / uniforms.GRAPHICS_MODE_WIDTH;
    float lineY2 = (roto.lineData.y1 + 0.90f) / uniforms.GRAPHICS_MODE_HEIGHT;

    float a = polygonWidth;
    float one_px = 1.0f / uniforms.WINDOW_WIDTH;
    vec2 p1 = vec2(lineX1, lineY1);
    vec2 p2 = vec2(lineX2, lineY2);

    float d = distance(p1, p2);
    float duv = distance(p1, uv);

    float r = 1.0f - floor(1.0f - (a * one_px) + distance(mix(p1, p2, clamp(duv / d, 0.0f, 1.0f)), uv));

    if (r > 0.0f) {
        pixel = colortable[roto.fgColor & 0xf];
    } else {
        pixel = colortable[roto.bgColor & 0xf];
    }

    return pixel;
}

vec4 DrawFontPixel(const Rotoscope roto, vec2 uv, vec2 subUv) {
    vec4 pixel;

    float fontX = (float(roto.blt_x) + subUv.x) / float(roto.blt_w);
    float fontY = (float(roto.blt_y) + subUv.y) / float(roto.blt_h);

    if(roto.textData.fontNum == 1) {
        // Find the character in our atlas.
        const float fontSpaceWidth = 8.0f * 4.0f;
        const float fontSpaceHeight = 8.0f * 4.0f;

        const float atlasWidth = 448.0f;
        const float atlasHeight = 160.0f;

        uint c = roto.textData.character - 32;
        uint fontsPerRow = 448 / uint(fontSpaceWidth);
        uint fontRow = c / fontsPerRow;
        uint fontCol = c % fontsPerRow;

        float u = fontCol * fontSpaceWidth / atlasWidth;
        float v = fontRow * fontSpaceHeight / atlasHeight;

        u += fontX * (fontSpaceWidth / atlasWidth);
        v += fontY * (fontSpaceHeight / atlasHeight);

        vec4 glyph = texture(FONT1Texture, vec2(u, v));
        pixel = colortable[roto.bgColor & 0xf];
        if(glyph.r > 0.80f) {
            pixel = colortable[roto.fgColor & 0xf];
        }
    } else if (roto.textData.fontNum == 2) {
        // Find the character in our atlas.
        const float fontSpaceWidth = 15.0f * 4.0f;
        const float fontSpaceHeight = 11.0f * 4.0f;

        const float atlasWidth = 840.0f;
        const float atlasHeight = 220.0f;

        uint c = roto.textData.character - 32;
        uint fontsPerRow = 840 / uint(fontSpaceWidth);
        uint fontRow = c / fontsPerRow;
        uint fontCol = c % fontsPerRow;

        float u = fontCol * fontSpaceWidth / atlasWidth;
        float v = fontRow * fontSpaceHeight / atlasHeight;

        u += fontX * (fontSpaceWidth / atlasWidth);
        v += fontY * (fontSpaceHeight / atlasHeight);

        vec4 glyph = texture(FONT2Texture, vec2(u, v));
        pixel = colortable[roto.bgColor & 0xf];
        if(glyph.r > 0.9f) {
            pixel = colortable[roto.fgColor & 0xf];
        }
    } else if (roto.textData.fontNum == 3) {
        // Find the character in our atlas.
        const float fontSpaceWidth = 15.0f * 4.0f;
        const float fontSpaceHeight = 11.0f * 4.0f;

        const float atlasWidth = 840.0f;
        const float atlasHeight = 220.0f;

        uint c = roto.textData.character - 32;
        uint fontsPerRow = 840 / uint(fontSpaceWidth);
        uint fontRow = c / fontsPerRow;
        uint fontCol = c % fontsPerRow;

        float u = fontCol * fontSpaceWidth / atlasWidth;
        float v = fontRow * fontSpaceHeight / atlasHeight;

        u += fontX * (fontSpaceWidth / atlasWidth);
        v += fontY * (fontSpaceHeight / atlasHeight);

        vec4 glyph = texture(FONT3Texture, vec2(u, v));
        pixel = colortable[roto.bgColor & 0xf];
        if(glyph.r > 0.9f) {
            pixel = colortable[roto.fgColor & 0xf];
        }
    }

    return pixel;
}

float rgb2hue(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return abs(q.z + (q.w - q.y) / (6.0 * d + e));
}

bool isGreen(vec3 rgb) {
    float hue = rgb2hue(rgb);
    return hue > 0.32 && hue < 0.34;
}

vec4 DrawRunBitPixel(const Rotoscope roto, vec2 uv, vec2 subUv) {
    vec4 pixel;

    vec4 fragColor;
    float iTime = uniforms.iTime;

    float subX = (float(roto.blt_x) + subUv.x) / float(roto.blt_w);
    float subY = (float(roto.blt_y) + subUv.y) / float(roto.blt_h);

    vec2 iResolution = vec2(float(roto.blt_w), float(roto.blt_h));
    vec2 fragCoord = vec2(subX * iResolution.x, subY * iResolution.y);

    switch (roto.runBitData.tag)
    {
        case 44: // Port-Pic Top 100 pixels
            pixel = texture(PORTPICTexture, vec2(subX, subY * 0.5f));
            if(isGreen(pixel.rgb))
            {
                stationStarsRender(pixel, fragCoord, iTime, iResolution);
            }
            break;
        case 49: // Port-Pic Botton 100 pixels
            pixel = texture(PORTPICTexture, vec2(subX, (subY * 0.5f) + 0.5f));
            break;
        case 141: // First splash
            pixel = texture(LOGO1Texture, uv);
            fragCoord.y = 199.0 - fragCoord.y;
            galaxyRender(fragColor, fragCoord, iTime, iResolution);
            pixel.xyz += fragColor.xyz;
            break;
        case 54:  // Second logo screen
            pixel = texture(LOGO2Texture, uv);
            break;
        default:
            pixel = vec4(1.0, 0.0, 0.0, 1.0); // vec4(unpackUnorm4x8(roto.argb)).bgra;
            break;
    }

    return pixel;
}

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 windowSize = vec2(float(uniforms.WINDOW_WIDTH), float(uniforms.WINDOW_HEIGHT));
    vec2 graphicSize = vec2(float(uniforms.GRAPHICS_MODE_WIDTH), float(uniforms.GRAPHICS_MODE_HEIGHT));
    
    vec2 uv = vec2(pixelPos) / windowSize;

    const float polygonWidth = uniforms.WINDOW_WIDTH / uniforms.GRAPHICS_MODE_WIDTH;

    // Calculate the corresponding position in the smaller texture
    uvec2 src = uvec2(floor(uv * graphicSize));

    // Calculate the index in the smaller texture
    uint srcIndex = src.y * uint(uniforms.GRAPHICS_MODE_WIDTH) + src.x;

    Rotoscope roto = rotoPixels[srcIndex];

    vec2 subUv = (uv * graphicSize) - vec2(src);

    // Pull the pixel from the smaller texture
    vec4 pixel = vec4(unpackUnorm4x8(roto.argb)).bgra;

    if(uniforms.useRotoscope != 0)
    {
        switch(roto.content) {
            #if 0 
            case LinePixel:
                pixel = DrawLinePixel(roto, uv, polygonWidth);
                break;
            #endif
            case TextPixel:
                pixel = DrawFontPixel(roto, uv, subUv);    
                break;
            case RunBitPixel:
                pixel = DrawRunBitPixel(roto, uv, subUv);
                break;
            default:
                break;
        }
    }
    else if(uniforms.useEGA == 0)
    {
        uint c = EGAToCGA[roto.EGAcolor];
        if(subUv.x < 0.5f)
        {
            pixel = CGAPalette[(c >> 2) & 3];
        }
        else
        {
            pixel = CGAPalette[c & 3];
        }
    }

    // Place the pixel in the larger surface
    imageStore(imgOutput, pixelPos, pixel);
}

