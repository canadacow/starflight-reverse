// GLSL Compute Shader
#version 450

#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 32, local_size_y = 32) in;

#define Icon_Other  0
#define Icon_Sun    1
#define Icon_Planet 2
#define Icon_Nebula 3
#define Icon_Flux   4

struct Icon {
    uint isActive;
    int x;
    int y;
    int screenX;

    int screenY;
    int bltX;
    int bltY;
    uint id;

    uint clr;
    uint icon_type;
    int planet_to_sunX;
    int planet_to_sunY;

    uint planetIndex;
};

// Equivalent of TextData struct
struct TextData {
    uint character;
    uint xormode;
    uint fontNum;
};

// Equivalent of LineData struct
struct LineData {
    uint x0;
    uint y0;
    uint x1;
    uint y1;
    uint n;
    uint total;
};

struct RunBitData {
    uint tag;
};

// Equivalent of Rotoscope struct
struct Rotoscope {
    uint content;
    uint EGAcolor;
    uint argb;
    int blt_x;
    int blt_y;
    int blt_w;
    int blt_h;
    uint bgColor;
    uint fgColor;
    TextData textData;
    LineData lineData;
    RunBitData runBitData;
    uint navMask;
    uint chromaKey;
};

layout(rgba8, binding = 0) writeonly uniform image2D imgOutput;

layout(std430, binding = 1) buffer RotoBuffer {
    Rotoscope rotoPixels[];
};

layout(binding = 2) uniform sampler2D ShipTexture;
layout(binding = 3) uniform sampler2DArray PlanetTextures;

layout(binding = 4) uniform UniformBlock {
    int GRAPHICS_MODE_WIDTH;
    int GRAPHICS_MODE_HEIGHT;
    int WINDOW_WIDTH;
    int WINDOW_HEIGHT;
    uint useRotoscope;
    uint useEGA;
    float iTime;
    float worldX;
    float worldY;
    float heading;
    float deadX;
    float deadY;
    // V= CONTEXT-ID#   ( 0=planet surface, 1=orbit, 2=system)         
    // (3 = hyperspace, 4 = encounter, 5 = starport)
    uint game_context; 
    uint alienVar1;
    float screenX;
    float screenY;
    float adjust;
    float planetSize;

    float orbitCamX;
    float orbitCamY;
    float orbitCamZ;

    float nebulaBase;
    float nebulaMultiplier;

    uint orbitMask;

} uniforms;

layout(binding = 5) uniform IconBlock {
    Icon icons[700];
};

#include "tables.h"
#include "noise.h"
#include "distance.h"
#include "hyperspace_stars.h"
#include "starburst.h"
#include "nebula.h"
#include "sun.h"
#include "planet.h"

#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))
#define pi 3.14159265359

float rr(vec2 uv, float halfExtent, float borderRadius, float anim)
{
    halfExtent += sin(uniforms.iTime * 3.) * .05 * anim;
    return smoothstep(.02, .01, 
                      length(max(abs(uv) - halfExtent, 0.)) - borderRadius);
}

float outerNotch(vec2 uv, float angle) 
{
    const float notchSize = .045;
    const float skew = 1.3;
    uv *= rot(angle);
    uv.y -= .55 + sin(uniforms.iTime * 6.) * .095;
    uv.x /= ((uv.y + notchSize) / (2. * notchSize)) * (skew - 1.) + 1.;
    uv.y /= 2.75;
    return smoothstep(.018, .01, length(max(abs(uv) - notchSize, 0.)));
}

vec4 drawReticle(vec2 uv)
{
    float inner = rr(uv, .18, .02, 1.) * (1. - rr(uv, .12, .02, 1.));
    float dawt = rr(uv, .03, .02, 0.);
    float notch = outerNotch(uv, 0.) + outerNotch(uv, pi / 2.)
        + outerNotch(uv, pi) + outerNotch(uv, 1.5 * pi);
    vec3 frag = (notch + dawt + inner + rr(uv, .35, .05, 1.) * (1. - rr(uv, .275, .05, 1.))
        * step(.15, min(abs(uv.x), abs(uv.y)))) * vec3(0., 1., 0.);

    float luminosity = 0.2126 * frag.r + 0.7152 * frag.g + 0.0722 * frag.b;
    float alpha = smoothstep(0.0, 1.0, luminosity);

    return vec4(frag, alpha);
}

#define THICKNESS 0.2

// b.x = width
// b.y = height
// r.x = roundness top-right  
// r.y = roundness boottom-right
// r.z = roundness top-left
// r.w = roundness bottom-left
float sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) 
{
    r.xy = (p.x>0.0)?r.xy : r.zw;
    r.x  = (p.y>0.0)?r.x  : r.y;
    vec2 q = abs(p)-b+r.x;
    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;
}

float sdCross( in vec2 p, in vec2 b, float r ) 
{
    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;
    
	vec2  q = p - b;
    float k = max(q.y,q.x);
    vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);
    float d = length(max(w,0.0));
    return ((k>0.0)?d:-d) + r;
}

float opSubtraction( float d1, float d2 )
{
    return max(-d1,d2);
}

float opOnion( in float p, in float r )
{
  return abs(p) - r;
}

vec4 DrawShip(in vec2 p)
{   
    float transition = (sin(uniforms.iTime/0.5) + 1.0) / 2.0;

	float d = opOnion(sdRoundBox( p, vec2(1.0, 1.0), vec4(transition) ) + THICKNESS, THICKNESS);
    d = opSubtraction(sdCross( p, vec2(1.5, 0.15), 0.0 ), d);

    vec3 frag = (d>0.0) ? vec3(0.0, 0.0, 0.0) : vec3(0.33, 1.0, 1.0);

    float luminosity = 0.2126 * frag.r + 0.7152 * frag.g + 0.0722 * frag.b;
    float alpha = smoothstep(0.0, 1.0, luminosity);

    return vec4(frag, alpha);
}


// Simplified Aurora Shader

float aurora_hash12(vec2 pos) {
    vec3 p3  = fract(vec3(pos.xyx) * 0.1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

float aurora_hash13(vec3 p3) {
	p3 = fract(p3 * 0.1031);
    p3 += dot(p3, p3.zyx + 31.32);
    return fract((p3.x + p3.y) * p3.z);
}

vec3 aurora_hash33(vec3 p3) {
    p3 = fract(p3 * vec3(0.1031, 0.1030, 0.0973));
    p3 += dot(p3, p3.yxz + 33.33);
    return fract((p3.xxy + p3.yxx) * p3.zyx);
}

float aurora_noise(vec2 n) {
    vec4 b = vec4(floor(n), ceil(n)); 
    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
    return mix(mix(aurora_hash12(b.xy), aurora_hash12(b.zy), f.x), mix(aurora_hash12(b.xw), aurora_hash12(b.zw), f.x), f.y);
}

float aurora_noise(vec2 coord, float n) {
    float componenta = aurora_hash13(vec3(coord, round(n - 0.5)));
    float componentb = aurora_hash13(vec3(coord, round(n + 0.5)));
    float componentc = mix(componenta, componentb, mod(n, 1.0));
    return componentc;
}

vec3 aurora_colorednoise(vec2 coord, float n) {
    vec3 componenta = aurora_hash33(vec3(coord, round(n - 0.5)));
    vec3 componentb = aurora_hash33(vec3(coord, round(n + 0.5)));
    vec3 componentc = mix(componenta, componentb, mod(n, 1.0));
    return componentc;
}

float aurora_fbm(vec2 x) {
    float v = 0.0;
    float a = 0.5;
    for(int i = 0; i < 8; i++) {
        v += a * aurora_noise(x);
        x  = x * 2.0;
        a *= 0.5;
    }
    return v;
}

vec3 aurora_blackbody(float temperature) {
    vec3 O = vec3(0.0);

    for(float i = 0.0; i < 3.0; i += 0.1) {
        float f = 1.0 + 0.5 * i;

        O[int(i)] += 10.0 * (f * f * f) / (exp((19e3 * f / temperature)) - 1.0);
    }

    return O;
}

vec3 aurora_stars(vec2 coord, float iTime) {
    float luminance = max(0.0, (aurora_hash12(coord) - 0.985));
    float temperature = (aurora_hash12(coord + vec2(1.0, 1.0)) * 6000.0) + 4000.0;
    vec3 colorshift = normalize(aurora_colorednoise(coord, iTime * 16.0));
    return (luminance * aurora_noise(coord, iTime * 4.0)) * aurora_blackbody(temperature) * 4.0 * (colorshift * 0.5 + 1.0);
}

vec3 aurora_dust(vec2 coord) {
    return max(0.0, aurora_fbm((coord * 2.0) + aurora_fbm(coord * 2.0) + vec2(4.0, 4.0)) - 0.5) * vec3(0.500, 0.400, 0.300);
}

vec4 Aurora(vec2 uv, float iTime) {
    vec3 star = aurora_stars(uv * vec2(2000.0, 1850.0), iTime);
    vec3 dust = aurora_dust(uv);
    vec3 color = star + dust;
    return vec4(color, 1.0);
}

vec4 DrawStarmapPixel(vec2 uv) {
    vec4 pixel = vec4(0.);

    vec4 fragColor;
    vec2 sub;

    float iTime = uniforms.iTime;

    vec2 normalizedCoords = uv / vec2(imageSize(imgOutput));

    vec2 pixelPos = vec2(uniforms.worldX, uniforms.worldY) + (normalizedCoords * vec2(uniforms.screenX, uniforms.screenY));

    vec4 starPixel = vec4(0.);
    vec4 sunPixel = vec4(0.);
    vec4 fluxPixel = vec4(0.);
    vec4 shipPixel = vec4(0.);
    vec4 nebulaPixel = vec4(0.);
    vec4 reticlePixel = vec4(0.);

    bool hasNebula = false;

    for(int i = 0; i < 700; i++) {
        Icon icon = icons[i];

        if(icon.isActive == 0)
            continue;

        vec2 iconPos = vec2(float(icon.x), float(icon.y));
        vec2 fluxDest = vec2(float(icon.planet_to_sunX), float(icon.planet_to_sunY));

        if(icon.id >= 51 && icon.id <= 91) 
        {
            float basesize = 8.0f * float(icon.id - 50);

            if(icon.icon_type == Icon_Nebula)
            {
                if(calculateDistanceWorldAspect(iconPos, pixelPos) < basesize) 
                {
                    nebulaPixel = vec4(0.0, 0.66, 0.00, 1.0);
                    hasNebula = true;
                }
            }
        }
        else
        {
            float distance = 4.5;

            switch(icon.id) {
                case 253:
                    {
                        float circ = calculateDistanceWorldAspect(iconPos, pixelPos);
                        if(circ < (distance - 1.5)) {
                            sunPixel = vec4(colortable[icon.clr & 0xf].rgb, 1.0);
                        }
                        else if(circ < distance) {
                            sunPixel = vec4(1.);
                        }
                    }
                    break;
                case 254: // Invisible icon (Encounter hit testing?)
                    // NOP
                    break;
                case 255: // Flux icon
                    {
                        if(icon.clr == 3)
                        {
                            // Calculate normalized direction vector from iconPos to fluxDest
                            vec2 direction = normalize(fluxDest - iconPos);
                            // Calculate perpendicular vector to the line for width calculation
                            vec2 perpDirection = vec2(-direction.y, direction.x);

                            float thickness = 2.0;
                            vec2 toStart = pixelPos - iconPos;
                            float projection = dot(toStart, direction);
                            float distToLine = length(toStart - projection * direction);

                            // Endpoint circle radius
                            float endpointRadius = distance;

                            // Check if the current pixel is close to either endpoint
                            bool nearStart = length(pixelPos - iconPos) < endpointRadius;
                            bool nearEnd = length(pixelPos - fluxDest) < endpointRadius;

                            if(distToLine < thickness && projection > 0.0 && projection < length(fluxDest - iconPos)) {
                                float linePos = projection / length(fluxDest - iconPos);
                                fluxPixel = vec4(mix(vec3(0.5), vec3(0.75), linePos), 1.0);
                            }
                            else if (nearStart || nearEnd) {
                                fluxPixel = vec4(mix(vec3(0.5), vec3(0.75), 0.5), 1.0); // Match the line's color gradient midpoint
                            }
                        }
                    }
                    break;
                default:
                    break;
            }

        }
    }

    vec2 iResolution = vec2(2000.0, 1850.0);
    vec2 fragCoord = pixelPos;

    vec2 normUv = fragCoord / iResolution;

    pixel = Aurora(normUv, uniforms.iTime);

    vec2 recticle = vec2(uniforms.deadX, uniforms.deadY);
    vec2 ship = vec2(uniforms.orbitCamX, uniforms.orbitCamY);

    if(calculateBoundingBoxDistance(recticle, pixelPos) < 32.0)
    {
        vec2 normUV = calculateNormalizedUVWorldAspect(recticle, pixelPos, 32.0) - vec2(0.5, 0.5);
        reticlePixel = drawReticle(normUV);
    }

    if(calculateBoundingBoxDistance(ship, pixelPos) < 14.0)
    {
        vec2 normUV = calculateNormalizedUVWorldAspect(ship, pixelPos, 12.0) - vec2(0.5, 0.5);
        shipPixel = DrawShip(normUV);
    }

    if(hasNebula)
    {
        pixel = nebulaPixel;
    }
    else
    {
        pixel += fluxPixel;
        pixel += starPixel;
        pixel += sunPixel;
    }

    pixel = shipPixel + (pixel * (1 - shipPixel.a));
    pixel = reticlePixel + (pixel * (1 - reticlePixel.a));
    
    return pixel;
}

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(pixelPos);

    vec4 pixel = DrawStarmapPixel(uv);

    // Place the pixel in the larger surface
    imageStore(imgOutput, pixelPos, pixel);
}
