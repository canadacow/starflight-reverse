// GLSL Compute Shader
#version 450

#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 4, local_size_y = 4) in;

#define Icon_Other  0
#define Icon_Sun    1
#define Icon_Planet 2
#define Icon_Nebula 3

struct Icon {
    uint isActive;
    int x;
    int y;
    int screenX;

    int screenY;
    int bltX;
    int bltY;
    uint id;

    uint clr;
    uint icon_type;
    int planet_to_sunX;
    int planet_to_sunY;

    uint planetIndex;
};

// Equivalent of TextData struct
struct TextData {
    uint character;
    uint xormode;
    uint fontNum;
};

// Equivalent of LineData struct
struct LineData {
    uint x0;
    uint y0;
    uint x1;
    uint y1;
    uint n;
    uint total;
};

struct RunBitData {
    uint tag;
};

// Equivalent of Rotoscope struct
struct Rotoscope {
    uint content;
    uint EGAcolor;
    uint argb;
    int blt_x;
    int blt_y;
    int blt_w;
    int blt_h;
    uint bgColor;
    uint fgColor;
    TextData textData;
    LineData lineData;
    RunBitData runBitData;
    uint navMask;
    uint chromaKey;
};

layout(rgba8, binding = 0) writeonly uniform image2D imgOutput;

layout(std430, binding = 1) buffer RotoBuffer {
    Rotoscope rotoPixels[];
};

layout(binding = 2) uniform sampler2D ShipTexture;
layout(binding = 3) uniform sampler2DArray PlanetTextures;

layout(binding = 4) uniform UniformBlock {
    int GRAPHICS_MODE_WIDTH;
    int GRAPHICS_MODE_HEIGHT;
    int WINDOW_WIDTH;
    int WINDOW_HEIGHT;
    uint useRotoscope;
    uint useEGA;
    float iTime;
    float worldX;
    float worldY;
    float heading;
    float deadX;
    float deadY;
    // V= CONTEXT-ID#   ( 0=planet surface, 1=orbit, 2=system)         
    // (3 = hyperspace, 4 = encounter, 5 = starport)
    uint game_context; 
    uint alienVar1;
    float screenX;
    float screenY;
    float adjust;
    float planetSize;

    float orbitCamX;
    float orbitCamY;
    float orbitCamZ;

    float nebulaBase;
    float nebulaMultiplier;

    uint orbitMask;

} uniforms;

layout(binding = 5) uniform IconBlock {
    Icon icons[1024];
};

#include "tables.h"
#include "noise.h"
#include "distance.h"
#include "hyperspace_stars.h"
#include "starburst.h"
#include "nebula.h"
#include "sun.h"
#include "planet.h"

vec4 DrawOrbits(vec2 uv) {
    
    // Center the coordinates
    uv = uv * 2.0 - 1.0;

    // Parameters
    vec2 center = vec2(0.0, 0.0); // Center of the orbits
    float fadeWidth = 0.01; // Width of the fade effect for each orbit
    vec3 orbitColor = vec3(0.66, 0.66, 0.66); // Color of the orbits
    
    // Bitmask representing which orbits are present (8-bit, 1 for each orbit)
    uint bitmask = uniforms.orbitMask; // Decimal equivalent of the binary 10101010
    
    // Initialize alpha to 0 (fully transparent)
    float alpha = 0.0;
    
    // Loop through each bit in the bitmask to draw orbits if that bit is set
    for(int i = 0; i < 8; i++) {
        if((bitmask & (1 << i)) != 0) {
            // Calculate the radius for this orbit based on its index
            float radius = 0.15 + float(i) * 0.11; // Adjust spacing as needed
            
            // SDF for a circle at this radius
            float dist = length(uv - center) - radius;
            
            // Calculate alpha for this orbit, add it to the total alpha
            alpha += 1.0 - smoothstep(0.0, fadeWidth, abs(dist));
        }
    }
    
    // Clamp alpha to [0, 1] to ensure it doesn't exceed 1
    alpha = clamp(alpha, 0.0, 1.0);
    
    // Combine the color with the calculated alpha for the gradient effect
    vec4 fragColor = vec4(orbitColor * alpha, alpha);
    return fragColor;
}

vec4 DrawStarmapPixel(vec2 uv) {
    vec4 pixel = vec4(0.);

    vec4 fragColor;
    vec2 sub;

    float iTime = uniforms.iTime;

    vec2 normalizedCoords = (uv - vec2(0.5, 0.5)) * vec2(800.0, -800.0);

    vec2 pixelPos = normalizedCoords * vec2(4.0, 6.0);

    vec4 starPixel = vec4(0.);
    vec4 sunPixel = vec4(0.);
    vec4 iconPixel = vec4(0.);
    vec4 shipPixel = vec4(0.);
    vec4 nebulaPixel = vec4(0.);

    for(int i = 0; i < 1024; i++) {
        Icon icon = icons[i];

        if(icon.isActive == 0)
            continue;

        vec2 iconPos = vec2(float(icon.x), float(icon.y));
        //iconPos *= vec2(4.0, 6.0);
        iconPos *= vec2(1.0, 1.0);

        if(icon.id >= 51 && icon.id <= 91) 
        {
            float basesize = 29.0f * float(icon.id - 50);

            if(icon.icon_type == Icon_Nebula)
            {
                if(calculateDistance(iconPos, pixelPos) < basesize) 
                {
                    nebulaPixel = vec4(0.2, 0.56, 0.89, 1.0);
                }
            }
            else if(icon.icon_type == Icon_Sun)
            {
                float dist = calculateDistance(iconPos, pixelPos);
                if(dist < basesize * 4.0) {
                    vec2 normUV = calculateNormalizedUVIcon(iconPos, pixelPos, basesize * 4.0);
                    sunPixel = vec4(colortable[icon.clr & 0xf].rgb, 1.0);
                }
            }
        }
    }

    pixel += starPixel;
    pixel = sunPixel  + (pixel * (1 - sunPixel.a));
    pixel = nebulaPixel + (pixel * (1 - nebulaPixel.a));
    pixel = shipPixel + (pixel * (1 - shipPixel.a));
    
    
    return pixel;
}

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = pixelPos / vec2(imageSize(imgOutput));

    vec4 pixel = DrawStarmapPixel(uv);

    // Place the pixel in the larger surface
    imageStore(imgOutput, pixelPos, pixel);
}
