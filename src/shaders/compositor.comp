// GLSL Compute Shader
#version 450

#extension GL_GOOGLE_include_directive : enable

#include "uniform.h"

layout(rgba8, binding = 0) writeonly uniform image2D imgOutput;
layout(rgba8, binding = 1) readonly uniform image2D gameScreen;
layout(rgba8, binding = 2) readonly uniform image2D menuScreen;

layout(binding = 3) uniform UB {
    UniformBlock uniforms;
} ub;

layout(local_size_x = 32, local_size_y = 32) in;

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

    vec4 gamePixel = imageLoad(gameScreen, pixelPos);
    vec4 menuPixel = imageLoad(menuScreen, pixelPos);
    // Use uniforms.menuVisibility directly for blurAmount calculation
    float menuAlpha = menuPixel.a * ub.uniforms.menuVisibility;

    // Apply Gaussian blur based on overall menu visibility
    float blurAmount = ub.uniforms.menuVisibility * ub.uniforms.blurAmount; // Increase the blur amount as menu becomes more visible
    float shadow = 0.0;
    int blurRadius = int(blurAmount);
    if (blurRadius > 0 && menuPixel.a == 0.0) {
        float totalWeight = 0.0;
        for (int dx = -blurRadius; dx <= blurRadius; ++dx) {
            for (int dy = -blurRadius; dy <= blurRadius; ++dy) {
                float weight = exp(-(dx * dx + dy * dy) / (2.0 * blurAmount));
                shadow += weight * imageLoad(menuScreen, pixelPos + ivec2(dx, dy)).a;
                totalWeight += weight;
            }
        }
        shadow /= totalWeight;
    }
    
    // Blend game and menu screens
    vec4 shadowedGame = gamePixel * (1.0 - shadow);
    vec4 finalPixel = (menuPixel * menuAlpha) + (shadowedGame * (1 - menuAlpha));
    imageStore(imgOutput, pixelPos, finalPixel);
}